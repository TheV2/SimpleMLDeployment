# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, feature1: int=None, feature2: int=None, feature3: int=None):  # noqa: E501
        """UserData - a model defined in Swagger

        :param feature1: The feature1 of this UserData.  # noqa: E501
        :type feature1: int
        :param feature2: The feature2 of this UserData.  # noqa: E501
        :type feature2: int
        :param feature3: The feature3 of this UserData.  # noqa: E501
        :type feature3: int
        """
        self.swagger_types = {
            'feature1': int,
            'feature2': int,
            'feature3': int
        }

        self.attribute_map = {
            'feature1': 'feature1',
            'feature2': 'feature2',
            'feature3': 'feature3'
        }

        self._feature1 = feature1
        self._feature2 = feature2
        self._feature3 = feature3

    @classmethod
    def from_dict(cls, dikt) -> 'UserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserData of this UserData.  # noqa: E501
        :rtype: UserData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature1(self) -> int:
        """Gets the feature1 of this UserData.


        :return: The feature1 of this UserData.
        :rtype: int
        """
        return self._feature1

    @feature1.setter
    def feature1(self, feature1: int):
        """Sets the feature1 of this UserData.


        :param feature1: The feature1 of this UserData.
        :type feature1: int
        """
        if feature1 is None:
            raise ValueError("Invalid value for `feature1`, must not be `None`")  # noqa: E501

        self._feature1 = feature1

    @property
    def feature2(self) -> int:
        """Gets the feature2 of this UserData.


        :return: The feature2 of this UserData.
        :rtype: int
        """
        return self._feature2

    @feature2.setter
    def feature2(self, feature2: int):
        """Sets the feature2 of this UserData.


        :param feature2: The feature2 of this UserData.
        :type feature2: int
        """
        if feature2 is None:
            raise ValueError("Invalid value for `feature2`, must not be `None`")  # noqa: E501

        self._feature2 = feature2

    @property
    def feature3(self) -> int:
        """Gets the feature3 of this UserData.


        :return: The feature3 of this UserData.
        :rtype: int
        """
        return self._feature3

    @feature3.setter
    def feature3(self, feature3: int):
        """Sets the feature3 of this UserData.


        :param feature3: The feature3 of this UserData.
        :type feature3: int
        """
        if feature3 is None:
            raise ValueError("Invalid value for `feature3`, must not be `None`")  # noqa: E501

        self._feature3 = feature3
